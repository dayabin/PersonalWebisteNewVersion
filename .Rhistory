blogdown:::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
install.packages("citr")
blogdown:::serve_site()
library(citr)
remove.packages("citr", lib="~/R/win-library/4.1")
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown:::serve_site()
getwd()
library(tidyverse)
library(sf)
library(stars)
library(gstat)
getwd()
getwd()
class(zz)
class(zz)
class(contourline)
library(tidyverse)
library(sf)
library(stars)
library(gstat)
library(tmap)
dataMap <- st_read(dsn = 'contour.gpkg')
# Here I use the ESRI:102004 projection
dataMap <- st_transform(dataMap, "ESRI:102004")
head(dataMap)
tm_shape(dataMap) + tm_polygons(col = 'contour')
dataLines <- st_cast(dataMap, 'MULTILINESTRING')
tm_shape(dataLines) + tm_lines(col = 'contour')
dataRaster <- st_rasterize(dataMap['contour'])
breaks = seq(0,200, 50)
dataRasterLines <- st_contour(dataRaster, breaks = breaks, contour_lines = T)
tm_shape(dataRasterLines) + tm_lines(col = 'contour')
dataPoints <- st_point_on_surface(dataMap)
# We prepare the empty raster that we will perform interplation on
dataRasterBase <- st_bbox(dataMap) %>%
st_as_stars(dx = 10000) %>%
st_crop(dataMap)
# Here we run do the interplation
v_mod_ok = automap::autofitVariogram(contour ~ 1, as(dataPoints,
"Spatial"))
gg = gstat::gstat(formula = contour ~ 1, model = v_mod_ok$var_model,
data = dataPoints)
zz = predict(gg, dataRasterBase)
zz = zz["var1.pred", ]
names(zz) = "contour"
class(zz)
summary(zz)
summary(zz$contour)
max(zz$contour)
min(zz$contour)
summary(dataMap$contour)
summary(dataPoints$contour)
tm_shape(dataMap) + tm_borders(col = "gray80") +
tm_shape(contourline) + tmap::tm_lines(col = "contour",
lwd = 3, palette = "viridis") +
tm_layout(legend.title.size = 1.5, legend.text.size = 1,
legend.position = c("left", "bottom"), legend.format = list(digits = 0))
v_mod_ok = automap::autofitVariogram(contour ~ 1, as(dataPoints,
"Spatial"))
gg = gstat::gstat(formula = contour ~ 1, model = v_mod_ok$var_model,
data = dataPoints)
zz = predict(gg, dataRasterBase)
zz = zz["var1.pred", ]
names(zz) = "contour"
breaks1 <- seq(0, 200, 10)
contourline <- st_contour(zz, contour_lines = T, na.rm = F, breaks = breaks1)
tm_shape(dataMap) + tm_borders(col = "gray80") +
tm_shape(contourline) + tmap::tm_lines(col = "contour",
lwd = 3, palette = "viridis") +
tm_layout(legend.title.size = 1.5, legend.text.size = 1,
legend.position = c("left", "bottom"), legend.format = list(digits = 0))
head(contourline)
plot(zz)
breaks1 <- seq(80, 120, 20)
contourline <- st_contour(zz, contour_lines = T, na.rm = F, breaks = breaks1)
breaks1 <- seq(80, 120, 20)
contourline <- st_contour(zz, contour_lines = T, na.rm = F, breaks = breaks1)
tm_shape(dataMap) + tm_borders(col = "gray80") +
tm_shape(contourline) + tmap::tm_lines(col = "contour",
lwd = 3, palette = "viridis") +
tm_layout(legend.title.size = 1.5, legend.text.size = 1,
legend.position = c("left", "bottom"), legend.format = list(digits = 0))
breaks1 <- seq(80, 120, 20)
contourline <- st_contour(zz, contour_lines = T, na.rm = T, breaks = breaks1)
tm_shape(dataMap) + tm_borders(col = "gray80") +
tm_shape(contourline) + tmap::tm_lines(col = "contour",
lwd = 3, palette = "viridis") +
tm_layout(legend.title.size = 1.5, legend.text.size = 1,
legend.position = c("left", "bottom"), legend.format = list(digits = 0))
summary(contourline)
plot(zz)
breaks1 <- seq(80, 120, 5)
contourline <- st_contour(zz, contour_lines = T, na.rm = T, breaks = breaks1)
tm_shape(dataMap) + tm_borders(col = "gray80") +
tm_shape(contourline) + tmap::tm_lines(col = "contour",
lwd = 3, palette = "viridis") +
tm_layout(legend.title.size = 1.5, legend.text.size = 1,
legend.position = c("left", "bottom"), legend.format = list(digits = 0))
breaks1 <- seq(80, 120, 1)
contourline <- st_contour(zz, contour_lines = T, na.rm = T, breaks = breaks1)
tm_shape(dataMap) + tm_borders(col = "gray80") +
tm_shape(contourline) + tmap::tm_lines(col = "contour",
lwd = 3, palette = "viridis") +
tm_layout(legend.title.size = 1.5, legend.text.size = 1,
legend.position = c("left", "bottom"), legend.format = list(digits = 0))
breaks = seq(0, 200, 5)
dataRasterLines <- st_contour(dataRaster, breaks = breaks, contour_lines = T)
tm_shape(dataRasterLines) + tm_lines(col = 'contour')
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown:::serve_site()
blogdown:::serve_site()
getwd()
help("Rprofile")
?Startup
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
find_hugo
blogdown::find_hugo()
blogdown::install_hugo()
blogdown::find_hugo()
blogdown::remove_hugo(version = getOption("blogdown.hugo.version"), force = FALSE)
blogdown::find_hugo()
blogdown::remove_hugo()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::hugo_version()
blogdown::hugo_available()
blogdown::find_hugo()
blogdown::check_hugo()
blogdown::check_netlify()
blogdown::find_hugo()
find_hugo(version = getOption("blogdown.hugo.version"), quiet = FALSE)
blogdown::find_hugo(version = getOption("blogdown.hugo.version"), quiet = FALSE)
blogdown::hugo_version()
blogdown::hugo_version()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
blogdown:::update_meta_addin()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
hugo mod clean --all
hugo
blogdown::hugo_version()
blogdown::find_hugo()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::update_meta_addin()
blogdown:::update_meta_addin()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
stop_server()
blogdown:::stop_server()
blogdown:::serve_site()
blogdown:::stop_server()
blogdown:::serve_site()
blogdown:::stop_server()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
